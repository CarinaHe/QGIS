
from qgis.PyQt.QtCore import QVariant

#layer_list=iface.mapCanvas().layers()
#
#i=0
#
#for layer in layer_list:
#    layerType = layer.type()
#    if layerType == QgsMapLayer.VectorLayer:
#        work_layer=layer_list[i]
#        layer_list.pop(i)
#    i+=1
#
#print(layer_list)
#
#print(work_layer)
#
#
FRM_dir = "/home/c/Schreibtisch/BFW/Projekt_ForestRiskMap/FRM/"
work_layer = iface.addVectorLayer(f'{FRM_dir}NUTS_aktuell.shp', 'NUTS2', 'ogr')
work_layer.dataProvider().addAttributes([QgsField("PS_Fs2", QVariant.Double), 
                                            QgsField("PS_Ps2", QVariant.Double),
                                            QgsField("PS_Pa2", QVariant.Double),
                                            QgsField("LS_Fs2", QVariant.Double), 
                                            QgsField("LS_Ps2", QVariant.Double),
                                            QgsField("LS_Pa2", QVariant.Double),
                                            QgsField("PS_total2", QVariant.Double),
                                            QgsField("LS_total2", QVariant.Double),
                                           
                                            QgsField("LS_Fs_r2", QVariant.Double), 
                                            QgsField("LS_Ps_r2", QVariant.Double),
                                            QgsField("LS_Pa_r2", QVariant.Double),
                                            QgsField("LS_total_r2", QVariant.Double), ])
        
work_layer.updateFields()

expression1 = QgsExpression('("gsv_fag"*("F_F_sy_rcm"/1000)/("P_F_sy_rcm"/1000))')
expression2 = QgsExpression('("gsv_pin"*("F_P_sy_rcm"/1000)/("P_P_sy_rcm"/1000))')
expression3 = QgsExpression('("gsv_pic"*("F_P_ab_rcm"/1000)/("P_P_ab_rcm"/1000))')
expression4 = QgsExpression('"gsv_fag"-"PS_Fs"')
expression5 = QgsExpression('"gsv_pin"-"PS_Ps"')
expression6 = QgsExpression('"gsv_pic"-"PS_Pa"')
expression10 = QgsExpression('"PS_Fs"+"PS_Ps"+"PS_Pa"')
expression11 = QgsExpression('"LS_Fs"+"LS_Ps"+"LS_Pa"')
expression13 = QgsExpression('"LS_Fs"*100/"gsv_fag"')
expression14 = QgsExpression('"LS_Ps"*100/"gsv_pin"')
expression15 = QgsExpression('"LS_Pa"*100/"gsv_pic"')
expression16 = QgsExpression('"LS_total"*100/("gsv_fag"+"gsv_pic"+"gsv_pin")')
   
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(work_layer))

with edit(work_layer):
    for f in work_layer.getFeatures():
        context.setFeature(f)
        f['PS_Fs2'] = expression1.evaluate(context)
        f['PS_Ps2'] = expression2.evaluate(context)
        f['PS_Pa2'] = expression3.evaluate(context)
        work_layer.updateFeature(f)
        
print("PS done")

with edit(work_layer):
    for f in work_layer.getFeatures():
        context.setFeature(f)
        f['LS_Fs2'] = expression4.evaluate(context)
        f['LS_Ps2'] = expression5.evaluate(context)
        f['LS_Pa2'] = expression6.evaluate(context)
        work_layer.updateFeature(f)
        
print("LS done")

   

   

with edit(work_layer):
    for f in work_layer.getFeatures():
        context.setFeature(f)
        f['PS_total2'] = expression10.evaluate(context)
        f['LS_total2'] = expression11.evaluate(context)
        work_layer.updateFeature(f)

print("total done")    

with edit(work_layer):
    for f in work_layer.getFeatures():
        context.setFeature(f)
        f['LS_Fs_r2'] = expression13.evaluate(context)
        f['LS_Ps_r2'] = expression14.evaluate(context)
        f['LS_Pa_r2'] = expression15.evaluate(context)
        f['LS_total_r2'] = expression16.evaluate(context)
        work_layer.updateFeature(f)

print("% done")
    
    

